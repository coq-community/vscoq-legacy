{
  "name": "vscoq1",
  "displayName": "VsCoq Legacy",
  "description": "An IDE for the Coq Proof Assistant",
  "author": {
    "name": "Christian J. Bell",
    "email": "siegebell@gmail.com",
    "url": "http://people.csail.mit.edu/cj/"
  },
  "version": "0.4.1",
  "publisher": "coq-community",
  "license": "MIT",
  "icon": "images/logo.png",
  "engines": {
    "vscode": "^1.38.0",
    "node": ">=14.0.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "keywords": [
    "coq",
    "theorem prover",
    "proof assistant"
  ],
  "readme": "https://github.com/coq-community/vscoq-legacy/blob/main/README.md",
  "bugs": "https://github.com/coq-community/vscoq-legacy/issues",
  "homepage": "https://github.com/coq-community/vscoq-legacy/blob/main/README.md",
  "activationEvents": [
    "onLanguage:coq"
  ],
  "contributes": {
    "languages": [
      {
        "id": "coq",
        "aliases": [
          "Coq",
          "coq",
          "Gallina",
          "gallina"
        ],
        "extensions": [
          ".v"
        ],
        "configuration": "./client/coq.configuration.json",
        "icon": {
          "light": "./images/logo.png",
          "dark": "./images/logo.png"
        }
      }
    ],
    "grammars": [
      {
        "language": "coq",
        "scopeName": "source.coq",
        "path": "./client/syntaxes/coq.tmLanguage"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Coq configuration",
      "properties": {
        "coqtop.binPath": {
          "type": "string",
          "default": "",
          "description": "Path to coqtop and coqidetop binaries (alternatively, hoqtop and hoqidetop)."
        },
        "coqtop.coqtopExe": {
          "type": "string",
          "default": "coqtop",
          "description": "Name of the coqtop binary (alternatively, hoqtop)."
        },
        "coqtop.coqidetopExe": {
          "type": "string",
          "default": "coqidetop.opt",
          "description": "Name of the coqidetop binary (alternatively, hoqidetop)."
        },
        "coqtop.args": {
          "type": "array",
          "default": [],
          "markdownDescription": "A list of arguments to send to coqtop. Use seperate elements instead of spaces to seperate each argument, especially when a flag expects another trailing argument, e.g. `[\"-I\",\"./bin\"]` instead of `[\"-I ./bin\"]`"
        },
        "coqtop.startOn": {
          "type": "string",
          "enum": [
            "open-script",
            "interaction"
          ],
          "default": "open-script",
          "markdownDescription": "When to start an instance of coqtop: when a Coq script is opened (`open-script`) or else when the user begins interaction (`interaction`; default)."
        },
        "coq.loadCoqProject": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Load settings from `_CoqProject` (if found at the root of the Code project)"
        },
        "coq.coqProjectRoot": {
          "type": "string",
          "default": ".",
          "markdownDescription": "The path of the coq project relative to the workspace root. Also determines where to look for the `_CoqProject` file. Requires reloading."
        },
        "coq.moveCursorToFocus": {
          "type": "boolean",
          "default": true,
          "description": "Move the editor's cursor position as Coq interactively steps forward/backward a command"
        },
        "coq.interpretToEndOfSentence": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Interpret to point will interpret up to *and including* the sentence at the cursor"
        },
        "coq.autoRevealProofStateAtCursor": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If `true`, then auto-update the proof view with the cached state of the sentence the at the cursor. States are only cached when stepping through a proof, so the proof view will not be updated if e.g. the sentence was processed asynchronously and never had direct focus."
        },
        "coq.revealProofStateAtCursorDirection": {
          "type": "string",
          "enum": [
            "preceding",
            "subsequent"
          ],
          "default": "preceding",
          "description": "Controls whether viewing the state of a sentence reveals either the parent/source/preceding or child/subsequent state."
        },
        "coq.showProofViewOn": {
          "type": "string",
          "enum": [
            "open-script",
            "first-interaction",
            "manual"
          ],
          "default": "first-interaction",
          "description": "Create the proof view when a Coq script is opened, the user first interacts with coqtop, or else let the user do it manually."
        },
        "coq.proofViewDiff.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable/disable VsCoq's Proof View Diff. Only has acceptable performance on small goals."
        },
        "coq.proofViewDiff.addedTextIsItalic": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If `true`, in the proof view, the diff will show added characters in italic. Note: the color of added characters can be changed in `#coq.addedCharacter#`."
        },
        "coq.proofViewDiff.removedTextIsStrikedthrough": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If `true`, in the proof view, the diff will show removed characters with a line through. Note: the color of added characters can be changed in `#coq.removedCharacter#`."
        },
        "coq.format.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "If `false`, then all auto-formatting under `#coq.format#` is disabled"
        },
        "coq.format.indentAfterBullet": {
          "type": "string",
          "enum": [
            "none",
            "indent",
            "align"
          ],
          "default": "none",
          "markdownDescription": "Control how to indent the line after a bullet. `none` - no indent; `indent` - tab-indent; `align` - align to the previous line's tactic"
        },
        "coq.format.indentAfterOpenProof": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Indent after opening a proof with 'Proof'"
        },
        "coq.format.unindentOnCloseProof": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Auto-unindent `Qed.`, `Defined.`, and `Admitted.`. Note: requires `editor.formatOnType` to be set to `true` in settings.json"
        },
        "coq.hoverFunction": {
          "type": "string",
          "enum": [
            "about",
            "check"
          ],
          "default": "about",
          "markdownDescription": "Hover function used to display information about an identifier. `Check` is more concise but `About` has more information. (`About`; default)."
        }
      }
    },
    "commands": [
      {
        "command": "extension.coq.quit",
        "title": "Quit",
        "category": "Coq"
      },
      {
        "command": "extension.coq.reset",
        "title": "Reset",
        "category": "Coq"
      },
      {
        "command": "extension.coq.interrupt",
        "title": "Interrupt",
        "category": "Coq"
      },
      {
        "command": "extension.coq.finishComputations",
        "title": "Finish Computations",
        "category": "Coq"
      },
      {
        "command": "extension.coq.stepForward",
        "title": "Step Forward",
        "category": "Coq"
      },
      {
        "command": "extension.coq.stepBackward",
        "title": "Step Backward",
        "category": "Coq"
      },
      {
        "command": "extension.coq.interpretToPoint",
        "title": "Interpret To Point",
        "category": "Coq"
      },
      {
        "command": "extension.coq.interpretToPointSynchronous",
        "title": "Interpret To Point (Synchronous)",
        "category": "Coq"
      },
      {
        "command": "extension.coq.interpretToEnd",
        "title": "Interpret To End",
        "category": "Coq"
      },
      {
        "command": "extension.coq.interpretToEndSynchronous",
        "title": "Interpret To End (Synchronous)",
        "category": "Coq"
      },
      {
        "command": "extension.coq.moveCursorToFocus",
        "title": "Move cursor to the current focus location",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.check",
        "title": "Check",
        "description": "Check the type of term at the cursor",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.locate",
        "title": "Locate",
        "description": "Locate the term at the cursor",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.search",
        "title": "Search",
        "description": "Search for the term pattern at the cursor",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.print",
        "title": "Print",
        "description": "Print the definition of the term at the cursor",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.about",
        "title": "About",
        "description": "About the term pattern at the cursor",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.searchAbout",
        "title": "SearchAbout",
        "description": "SearchAbout the term pattern at the cursor",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.prompt.check",
        "title": "Prompt Check",
        "description": "Check the type of a term",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.prompt.locate",
        "title": "Prompt Locate",
        "description": "Locate a term",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.prompt.about",
        "title": "Prompt About",
        "description": "About a term",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.prompt.search",
        "title": "Prompt Search",
        "description": "Search for a term",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.prompt.searchAbout",
        "title": "Prompt SearchAbout",
        "description": "SearchAbout a term",
        "category": "Coq"
      },
      {
        "command": "extension.coq.query.prompt.print",
        "title": "Prompt Print",
        "description": "Print the definition of a term",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle",
        "title": "Display options",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle.implicitArguments",
        "title": "Display Implicit Arguments",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle.coercions",
        "title": "Display Coercions",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle.rawMatchingExpressions",
        "title": "Display Raw Matching Expressions",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle.notations",
        "title": "Display Notations",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle.allBasicLowLevelContents",
        "title": "Display All Basic Low Level Contents",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle.existentialVariableInstances",
        "title": "Display Existential Variable Instances",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle.universeLevels",
        "title": "Display Universe Levels",
        "category": "Coq"
      },
      {
        "command": "extension.coq.display.toggle.allLowLevelContents",
        "title": "Display All LowLevel Contents",
        "category": "Coq"
      },
      {
        "command": "extension.coq.proofView.open",
        "title": "Open proof view",
        "category": "Coq"
      },
      {
        "command": "extension.coq.proofView.viewStateAt",
        "title": "View the proof-state at the cursor position",
        "category": "Coq"
      },
      {
        "command": "extension.coq.ltacProf.getResults",
        "title": "View ltac profile",
        "category": "Coq"
      }
    ],
    "keybindings": [
      {
        "key": "ctrl+alt+.",
        "mac": "ctrl+alt+.",
        "command": "extension.coq.moveCursorToFocus",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "ctrl+alt+a",
        "mac": "cmd+ctrl+a",
        "command": "extension.coq.query.about",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "ctrl+alt+k",
        "mac": "cmd+ctrl+k",
        "command": "extension.coq.query.searchAbout",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "ctrl+alt+l",
        "mac": "cmd+ctrl+l",
        "command": "extension.coq.query.locate",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "ctrl+alt+c",
        "mac": "cmd+ctrl+c",
        "command": "extension.coq.query.check",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "ctrl+alt+p",
        "mac": "cmd+ctrl+p",
        "command": "extension.coq.query.print",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "alt+home",
        "mac": "cmd+ctrl+home",
        "command": "extension.coq.reset",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "alt+home",
        "mac": "cmd+ctrl+home",
        "command": "extension.coq.reset",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "ctrl+alt+`",
        "mac": "cmd+ctrl+`",
        "command": "extension.coq.interrupt",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "ctrl+alt+`",
        "mac": "cmd+ctrl+`",
        "command": "extension.coq.interrupt",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "ctrl+alt+pausebreak",
        "mac": "cmd+ctrl+pausebreak",
        "command": "extension.coq.interrupt",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "ctrl+alt+pausebreak",
        "mac": "cmd+ctrl+pausebreak",
        "command": "extension.coq.interrupt",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "alt+down",
        "mac": "ctrl+alt+down",
        "command": "extension.coq.stepForward",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "alt+down",
        "mac": "ctrl+alt+down",
        "command": "extension.coq.stepForward",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "alt+up",
        "mac": "ctrl+alt+up",
        "command": "extension.coq.stepBackward",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "alt+up",
        "mac": "ctrl+alt+up",
        "command": "extension.coq.stepBackward",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "alt+right",
        "mac": "ctrl+alt+right",
        "command": "extension.coq.interpretToPoint",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "alt+right",
        "mac": "ctrl+alt+right",
        "command": "extension.coq.interpretToPoint",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "alt+end",
        "mac": "ctrl+alt+end",
        "command": "extension.coq.interpretToEnd",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "alt+end",
        "mac": "ctrl+alt+end",
        "command": "extension.coq.interpretToEnd",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "shift+alt+i",
        "mac": "shift+ctrl+i",
        "command": "extension.coq.display.toggle.implicitArguments",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "shift+alt+i",
        "mac": "shift+ctrl+i",
        "command": "extension.coq.display.toggle.implicitArguments",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "shift+alt+c",
        "mac": "shift+ctrl+c",
        "command": "extension.coq.display.toggle.coercions",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "shift+alt+c",
        "mac": "shift+ctrl+c",
        "command": "extension.coq.display.toggle.coercions",
        "when": "resourceScheme==coq-view"
      },
      {
        "key": "shift+alt+n",
        "mac": "shift+ctrl+n",
        "command": "extension.coq.display.toggle.notations",
        "when": "editorTextFocus && editorLangId == coq"
      },
      {
        "key": "shift+alt+n",
        "mac": "shift+ctrl+n",
        "command": "extension.coq.display.toggle.notations",
        "when": "resourceScheme==coq-view"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "resourceLangId == coq",
          "command": "extension.coq.interpretToPoint",
          "group": "navigation"
        },
        {
          "when": "resourceLangId == coq",
          "command": "extension.coq.query.check",
          "group": "queries"
        },
        {
          "when": "resourceLangId == coq",
          "command": "extension.coq.query.print",
          "group": "queries"
        },
        {
          "when": "resourceLangId == coq",
          "command": "extension.coq.query.searchAbout",
          "group": "queries"
        },
        {
          "when": "resourceLangId == coq",
          "command": "extension.coq.query.locate",
          "group": "queries"
        }
      ]
    },
    "snippets": [
      {
        "language": "coq",
        "path": "./client/snippets/coq.json"
      }
    ],
    "colors": [
      {
        "id": "coq.proofviewText",
        "description": "Color for proofview text.",
        "defaults": {
          "dark": "#cccccc",
          "light": "#333333",
          "highContrast": "#333333"
        }
      },
      {
        "id": "coq.proofviewMessage",
        "description": "Color for proofview messages.",
        "defaults": {
          "dark": "#cccccc",
          "light": "#333333",
          "highContrast": "#333333"
        }
      },
      {
        "id": "coq.proofviewError",
        "description": "Color for proofview errors.",
        "defaults": {
          "dark": "#ffc0cb",
          "light": "#ff0000",
          "highContrast": "#ff0000"
        }
      },
      {
        "id": "coq.hypothesisIdent",
        "description": "Color for goal hypotheses identifiers.",
        "defaults": {
          "dark": "#20b2aa",
          "light": "#006400",
          "highContrast": "#006400"
        }
      },
      {
        "id": "coq.hypothesesSeparator",
        "description": "Color for hypotheses separator.",
        "defaults": {
          "dark": "#ffffff66",
          "light": "#00000033",
          "highContrast": "#00000033"
        }
      },
      {
        "id": "coq.oddHypothesisBackground",
        "description": "Background color for hypotheses with odd index.",
        "defaults": {
          "dark": "#0000000d",
          "light": "#ffffff0d",
          "highContrast": "#ffffff0d"
        }
      },
      {
        "id": "coq.newHypothesisBackground",
        "description": "Background color for new hypotheses.",
        "defaults": {
          "dark": "#00ff0017",
          "light": "#00aa0040",
          "highContrast": "#00aa0040"
        }
      },
      {
        "id": "coq.changedHypothesisBackground",
        "description": "Background color for changed hypotheses.",
        "defaults": {
          "dark": "#0000ff26",
          "light": "#0000ff0d",
          "highContrast": "#0000ff0d"
        }
      },
      {
        "id": "coq.goalId",
        "description": "Color of goal identifiers.",
        "defaults": {
          "dark": "#add8e6",
          "light": "#00008b",
          "highContrast": "#00008b"
        }
      },
      {
        "id": "coq.addedCharacter",
        "description": "Color of added characters (in diffs).",
        "defaults": {
          "dark": "#00fa001a",
          "light": "#00fa0033",
          "highContrast": "#00fa0033"
        }
      },
      {
        "id": "coq.removedCharacter",
        "description": "Color of removed characters (in diffs).",
        "defaults": {
          "dark": "#fa000099",
          "light": "#fa000033",
          "highContrast": "#fa000033"
        }
      },
      {
        "id": "coq.mainSubgoalBackground",
        "description": "Background color for main subgoal.",
        "defaults": {
          "dark": "#ffffff0d",
          "light": "#0000000d",
          "highContrast": "#0000000d"
        }
      },
      {
        "id": "coq.subgoalBackground",
        "description": "Background color for subgoals.",
        "defaults": {
          "dark": "#ffffff0d",
          "light": "#0000000d",
          "highContrast": "#0000000d"
        }
      },
      {
        "id": "coq.subgoalSeparator",
        "description": "Color of subgoal separators.",
        "defaults": {
          "dark": "#ffffff33",
          "light": "#00000033",
          "highContrast": "#00000033"
        }
      },
      {
        "id": "coq.termNotation",
        "description": "Color of term notations.",
        "defaults": {
          "dark": "#ff8c00",
          "light": "#ff8c00",
          "highContrast": "#ff8c00"
        }
      },
      {
        "id": "coq.termKeyword",
        "description": "Color of term keywords.",
        "defaults": {
          "dark": "#6495ed",
          "light": "#6495ed",
          "highContrast": "#6495ed"
        }
      },
      {
        "id": "coq.termEvar",
        "description": "Color of existential variables.",
        "defaults": {
          "dark": "#ff8c00",
          "light": "#ff8c00",
          "highContrast": "#ff8c00"
        }
      },
      {
        "id": "coq.termPath",
        "description": "Color of term paths.",
        "defaults": {
          "dark": "#9370d8",
          "light": "#ff8c00",
          "highContrast": "#ff8c00"
        }
      },
      {
        "id": "coq.termReference",
        "description": "Color of name references in terms.",
        "defaults": {
          "dark": "#7cfc00",
          "light": "#32cd32",
          "highContrast": "#32cd32"
        }
      },
      {
        "id": "coq.termType",
        "description": "Color of types in terms.",
        "defaults": {
          "dark": "#f08080",
          "light": "#ff7f50",
          "highContrast": "#ff7f50"
        }
      },
      {
        "id": "coq.termVariable",
        "description": "Color of variables in terms.",
        "defaults": {
          "dark": "#7fff00",
          "light": "#20b2aa",
          "highContrast": "#20b2aa"
        }
      },
      {
        "id": "coq.debugMessage",
        "description": "Color of debug messages.",
        "defaults": {
          "dark": "#9370d8",
          "light": "#daa520",
          "highContrast": "#daa520"
        }
      },
      {
        "id": "coq.errorMessage",
        "description": "Color of error messages.",
        "defaults": {
          "dark": "#ff0000",
          "light": "#ff0000",
          "highContrast": "#ff0000"
        }
      },
      {
        "id": "coq.warningMessage",
        "description": "Color of warning messages.",
        "defaults": {
          "dark": "#ffff00",
          "light": "#ffff00",
          "highContrast": "#ffff00"
        }
      },
      {
        "id": "coq.moduleKeyword",
        "description": "Color of module keywords.",
        "defaults": {
          "dark": "#6495ed",
          "light": "#6495ed",
          "highContrast": "#6495ed"
        }
      },
      {
        "id": "coq.tacticKeyword",
        "description": "Color of tactic keywords.",
        "defaults": {
          "dark": "#6495ed",
          "light": "#6495ed",
          "highContrast": "#6495ed"
        }
      },
      {
        "id": "coq.tacticPrimitive",
        "description": "Color of tactic primitives.",
        "defaults": {
          "dark": "#5f9ea0",
          "light": "#5f9ea0",
          "highContrast": "#5f9ea0"
        }
      },
      {
        "id": "coq.tacticString",
        "description": "Color of tactic strings.",
        "defaults": {
          "dark": "#ffa500",
          "light": "#ffa500",
          "highContrast": "#ffa500"
        }
      }
    ]
  },
  "main": "./client/out/extension",
  "scripts": {
    "vscode:prepublish": "npm run package",
    "package": "webpack --mode production --devtool hidden-source-map",
    "package:dev": "webpack --mode development",
    "compile": "webpack",
    "watch": "webpack --watch"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/coq-community/vscoq-legacy.git"
  },
  "devDependencies": {
    "@types/diff": "^4.0.2",
    "@types/jquery": "^3.5.0",
    "@types/mocha": "^5.2.7",
    "@types/mustache": "^4.1.2",
    "@types/node": "^17.0.4",
    "@types/sax": "^1.2.4",
    "@types/semver": "^7.1.1",
    "@types/vscode": "^1.38.0",
    "@types/ws": "^7.4.6",
    "jquery": "^3.5.0",
    "merge-options": "^3.0.4",
    "ts-loader": "^9.2.6",
    "typescript": "^3.7.5",
    "vsce": "^2.15.0",
    "webpack": "^5.76.0",
    "webpack-cli": "^5.0.0"
  },
  "dependencies": {
    "@types/hyperscript": "^0.0.4",
    "@types/mustache": "^4.2.1",
    "@types/pegjs": "^0.10.3",
    "@types/vscode-webview": "^1.57.0",
    "@vscode/webview-ui-toolkit": "^1.1.0",
    "bufferutil": "^4.0.1",
    "diff": "4.0.2",
    "hyperscript": "^2.0.2",
    "mustache": "^4.0.0",
    "pegjs": "^0.10.0",
    "sax": "^1.2.4",
    "semver": "^7.1.1",
    "string-argv": "^0.3.1",
    "utf-8-validate": "^5.0.2",
    "vscode-jsonrpc": "^4.0.0",
    "vscode-languageclient": "^5.2.1",
    "vscode-languageserver": "^5.2.1",
    "vscode-uri": "3.0.7",
    "ws": "^7.4.6"
  }
}
